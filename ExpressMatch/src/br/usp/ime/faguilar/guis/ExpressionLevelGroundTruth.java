/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExpressionLevelGroundTruth.java
 *
 * Created on Sep 10, 2012, 2:25:39 PM
 */

package br.usp.ime.faguilar.guis;

import DatabaseMathExpressions.TextualRepresentation;

/**
 *
 * @author frank
 */
public class ExpressionLevelGroundTruth extends javax.swing.JPanel {
    private TextualRepresentation groundTruth;
    private int selectedIndex;
    private static final int DEFAUL_INDEX = 0;

    /** Creates new form ExpressionLevelGroundTruth */
    public ExpressionLevelGroundTruth() {
        initComponents();
        initializeCustomFields();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        previousElement = new javax.swing.JButton();
        nextelement = new javax.swing.JButton();
        deleteElement = new javax.swing.JButton();
        newElement = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        previousElement.setText("<");
        previousElement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previousElementMouseClicked(evt);
            }
        });
        jPanel1.add(previousElement);

        nextelement.setText(">");
        nextelement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextelementMouseClicked(evt);
            }
        });
        jPanel1.add(nextelement);

        deleteElement.setText("-");
        deleteElement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteElementMouseClicked(evt);
            }
        });
        jPanel1.add(deleteElement);

        newElement.setText("+");
        newElement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newElementMouseClicked(evt);
            }
        });
        jPanel1.add(newElement);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void previousElementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousElementMouseClicked
        // TODO add your handling code here:
        if(isValidIndex(getSelectedIndex() - 1)){
            setTextToAreaAndSelectedIndex(getSelectedIndex() - 1);
        }
    }//GEN-LAST:event_previousElementMouseClicked

    private void nextelementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextelementMouseClicked
        // TODO add your handling code here:
        if(isValidIndex(getSelectedIndex() + 1)){
            setTextToAreaAndSelectedIndex(getSelectedIndex() + 1);
        }
    }//GEN-LAST:event_nextelementMouseClicked

    private void setTextToAreaAndSelectedIndex(int index){
        setSelectedIndex(index);
        textArea.setText(getGroundTruth().get(getSelectedIndex()));
    }


    private void newElementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newElementMouseClicked
        // TODO add your handling code here:
        addNewGroundTruth();
    }//GEN-LAST:event_newElementMouseClicked

    private void deleteElementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteElementMouseClicked
        // TODO add your handling code here:
        deleteCurrentGroundTruthElement();
    }//GEN-LAST:event_deleteElementMouseClicked

    private void textAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyReleased
        // TODO add your handling code here:
        groundTruth.set(getSelectedIndex(), textArea.getText());
    }//GEN-LAST:event_textAreaKeyReleased

    private void deleteCurrentGroundTruthElement(){
        if(!groundTruth.isEmpty()){
            groundTruth.remove(getSelectedIndex());
            if(groundTruth.isEmpty()){
                addNewGroundTruth();
            }else{
                if(getSelectedIndex() < getGroundTruth().size())
                    setTextToAreaAndSelectedIndex(getSelectedIndex());
                else
                    setTextToAreaAndSelectedIndex(getSelectedIndex()-1);
            }
        }
    }

    private boolean isValidIndex(int index){
        if(index >= 0 && index < groundTruth.size())
            return true;
        return false;
    }

    private void addNewGroundTruth(){
        groundTruth.add("");
        selectedIndex = groundTruth.size()-1;
        textArea.setText("");
    }

    public int getSelectedIndex() {
        return selectedIndex;
    }

    public void setSelectedIndex(int selectedIndex) {
        this.selectedIndex = selectedIndex;
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteElement;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newElement;
    private javax.swing.JButton nextelement;
    private javax.swing.JButton previousElement;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables


    public void initializeCustomFields(){
        setGroundTruth(new TextualRepresentation());
        addNewGroundTruth();
//        setSelectedIndex(INDEX_FOR_EMPTY_GROUND_TRUTH);
    }

    public TextualRepresentation getGroundTruth() {
        return groundTruth;
    }

    public void setGroundTruth(TextualRepresentation goundTruth) {
        this.groundTruth = goundTruth;
        if(!goundTruth.isEmpty()){
            textArea.setText(goundTruth.get(DEFAUL_INDEX));
            selectedIndex = DEFAUL_INDEX;
        }
    }

}
